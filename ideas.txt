Queries on a data structure take minimum time of the components; updates take maximum time.

class Structure(val data: List[Int]) {
  get(x: Int) = data.get(x)
  set(x: Int, value: Int) = data.set(x, value)
  getSmallest() = data.minimum
}

Good implementation: array and min heap, where the array also stores where the item is in the heap and the heap stores location in the array. In that implementation, get is O(1), set is O(log n), and getSmallest is O(1). Without the heap, those would be O(1), O(1), O(n)

List is a map from Int to items.

Let’s just talk about List implementations:

HashSet
ArrayList
LinkedList
MinHeap

List functions:

append
prepend
getMin
insert
set
get



OOOOOH if you mix in the Summable component, it adds this cost everywhere but you get O(1) sums! this works in general!


Let’s talk even simpler:

HashSet
ArrayList


methods:

get(index: Int)
set(index: Int, value: Int)
contains?(value: Int)
prepend(value: Int)

HashSet has O(n), O(n), O(1), O(n)
LinkedList has O(n), O(n), O(n), O(1)
ArrayList has O(1), O(1), O(n), O(n)



